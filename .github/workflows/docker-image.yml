# 工作流的名称
name: Build and Push Docker Image

# 触发工作流的事件
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches: [ "main" ]
  # 你也可以添加其他触发器，比如当有新的 tag 被推送时
  # push:
  #   tags: [ 'v*.*.*' ]
  # 允许你手动在 Actions 页面触发此工作流
  workflow_dispatch:

# 工作流执行的任务
jobs:
  # 定义一个名为 build-and-push 的任务
  build-and-push:
    # 任务运行的虚拟环境
    runs-on: ubuntu-latest

    # 任务的步骤
    steps:
      # 第 1 步：检出代码
      # actions/checkout 是一个官方的 action，用于检出你的仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第 2 步：登录到 Docker Hub
      # 使用我们之前设置的 Secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 第 3 步：构建并推送 Docker 镜像
      # docker/build-push-action 是一个专门用于构建和推送的 action
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # context 指定 Dockerfile 的位置，'.' 表示项目根目录
          context: .
          # file 指定 Dockerfile 的文件名
          file: ./Dockerfile
          # push: true 表示构建后推送到仓库
          push: true
          # tags 指定镜像的标签
          # 格式为: 你的DockerHub用户名/你的仓库名:标签
          # 'latest' 是一个常用的标签
          # 推荐使用 github.sha 来标记每次提交，保证版本的唯一性
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/deepresearch:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/deepresearch:${{ github.sha }}

